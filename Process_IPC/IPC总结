一、主要分类:
  进程间通信主要包括管道, 系统IPC（包括消息队列,信号,共享存储), 套接字(SOCKET).
管道包括三种:
  1)普通管道PIPE, 通常有两种限制,一是单工,只能单向传输;二是只能在父子或者兄弟进程间使用.
  2)流管道s_pipe: 去除了第一种限制,为半双工，可以双向传输.
  3)命名管道:name_pipe, 去除了第二种限制,可以在许多并不相关的进程之间进行通讯.

系统IPC的三种方式类同,都是使用了内核里的标识符来识别.

FAQ1: 管道与文件描述符,文件指针的关系?
  答: 其实管道的使用方法与文件类似,都能使用read,write,open等普通IO函数. 管道描述符来类似于文件描述符. 
      事实上, 管道使用的描述符,文件指针和文件描述符最终都会转化成系统中SOCKET描述符. 都受到系统内核中
      SOCKET描述符的限制. 本质上LINUX内核源码中管道是通过空文件来实现.
FAQ2: 管道的使用方法?
  答: 主要有下面几种方法: 
      1)pipe, 创建一个管道,返回2个管道描述符.通常用于父子进程之间通讯. 
      2)popen, pclose: 这种方式只返回一个管道描述符,常用于通信另一方是stdin or stdout; 
      3)mkpipe:命名管道, 在许多进程之间进行交互.
FAQ3: 管道与系统IPC之间的优劣比较?
  答: 优点是所有的UNIX实现都支持, 并且在最后一个访问管道的进程终止后,管道就被完全删除;
      缺陷是管道只允许单向传输或者用于父子进程之间.

      系统IPC: 
      优点是功能强大,能在毫不相关进程之间进行通讯; 
      缺陷是关键字KEY_T使用了内核标识,占用了内核资源,而且只能被显式删除,而且不能使用
      SOCKET的一些机制,例如select,epoll等.
FAQ4: WINDOS进程间通信与LINUX进程间通信的关系?
  答: 事实上,WINDOS的进程通信大部分移植于UNIX, WINDOS的剪贴板,文件映射等都可从UNIX进程通信的共享存储中找到影子.
FAQ5: 进程间通信与线程间通信之间的关系?
  答: 因为WINDOWS运行的实体是线程, 狭义上的进程间通信其实是指分属于不同进程的线程之间的通讯.而单个进程
      之间的线程同步问题可归并为一种特殊的进程通信.它要用到内核支持的系统调用来保持线程之间同步. 通常用
      到的一些线程同步方法包括:Event, Mutex,信号量Semaphore,临界区资源等.

二、IPC目的:
  1）数据传输：一个进程需要将它的数据发送给另一个进程，发送的数据量在一个字节到几兆字节之间。
  2）共享数据：多个进程想要操作共享数据，一个进程对共享数据的修改，别的进程应该立刻看到。
  3）通知事件：一个进程需要向另一个或一组进程发送消息，通知它（它们）发生了某种事件（如进程终止时要通知父进程）。
  4）资源共享：多个进程之间共享同样的资源。为了作到这一点，需要内核提供锁和同步机制。
  5）进程控制：有些进程希望完全控制另一个进程的执行（如Debug进程），此时控制进程希望能够拦截另一个进程的所有
  陷入和异常， 并能够及时知道它的状态改变。

进程通过与内核及其它进程之间的互相通信来协调它们的行为。Linux支持多种进程间通信（IPC）机制，信号和管道是其中的两种。
除此之外，Linux还支持System V 的IPC机制（用首次出现的Unix版本命名）。

关于关于进程和线程的详细描述，下面是就是总结性的概括下：
----------------------------------------------------------------------
    进程：
    是系统进行资源分配和调度的一个独立单位.
    是程序的一次执行，每个进程都有自己的地址空间、内存、数据栈及其他辅助记录运行轨迹的数据
    线程：
    是进程的一个实体，是CPU调度和分派的基本单位,它是比进程更小的能独立运行的基本单位
    所有的线程运行在同一个进程中，共享相同的运行资源和环境
    线程一般是并发执行的，使得实现了多任务的并行和数据共享。

进程和线程的区别：
-----------------------------------------------------------------------
    一个线程只能属于一个进程，而一个进程可以有多个线程，但至少有一个线程
    线程的划分尺度小于进程(资源比进程少)，使得多线程程序的并发性高。
    进程在执行过程中拥有独立的内存单元，而多个线程共享内存，从而极大地提高了程序的运行效率
    资源分配给进程，同一进程的所有线程共享该进程的所有资源。
    CPU分给进程程，即真正在CPU上运行的是线程
    线程不能够独立执行，必须依存在进程中
    优缺点：
    线程执行开销小，但不利于资源的管理和保护；而进程正相反


二. 进程
1. 进程的优点
    顺序程序的特点：具有封闭性和可再现性；
    进程、线程、多进程、多线程的优缺点和区别_m493096871的博客-CSDN博客_多进程和多线程的优缺点
    程序的并发执行和资源共享。多道程序设计出现后，实现了程序的并发执行和资源共享，提高了系统的效率和
    系统的资源利用率。
2. 进程的缺点
    操作系统调度切换多个线程要比切换调度进程在速度上快的多。而且进程间内存无法共享，通讯也比较麻烦。
    线程之间由于共享进程内存空间，所以交换数据非常方便；在创建或撤消进程时，由于系统都要为之分配和回收资源，导致系统的开销明显大于创建或撤消线程时
    的开销。
三. 线程
1. 线程的优点
    它是一种非常”节俭”的多任务操作方式。在Linux系统下，启动一个新的进程必须分配给它独立的地址空间，建立众多的数据表来维护它的代码段、堆栈段和数
    据段，这是一种”昂贵”的多任务工作方式。而运行于一个进程中的多个线程，它们彼此之间使用相同的地址空间，共享大部分数据，启动一个线程所花费的空间
    远远小于启动一个进程所花费的空间，而且，线程间彼此切换所需的时间也远远小于进程间切换所需要的时间。当然，在具体的系统上，这个数据可能会有较大的
    区别；
    线程间方便的通信机制，由于同一进程下的线程之间共享数据空间，所以一个线程的数据可以直接为其它线程所用，这不仅快捷，而且方便；
    使多CPU系统更加有效。操作系统会保证当线程数不大于CPU数目时，不同的线程运行于不同的CPU上；
2. 线程的缺点
    调度时, 要保存线程状态，频繁调度, 需要占用大量的机时；
    程序设计上容易出错（线程同步问题）。

四. 多进程
1. 多进程优点
    每个进程互相独立，不影响主程序的稳定性，子进程崩溃没关系；
    通过增加CPU，就可以容易扩充性能；
    可以尽量减少线程加锁/解锁的影响，极大提高性能，就算是线程运行的模块算法效率低也没关系；
    每个子进程都有2GB地址空间和相关资源，总体能够达到的性能上限非常大
    进程、线程、多进程、多线程的优缺点和区别_m493096871的博客-CSDN博客_多进程和多线程的优缺点

2. 多进程缺点
    逻辑控制复杂，需要和主程序交互；
    需要跨进程边界，如果有大数据量传送，就不太好，适合小数据量传送、密集运算
    多进程调度开销比较大；

五. 多线程
1. 多线程的优点
    无需跨进程边界；
    程序逻辑和控制方式简单；
    所有线程可以直接共享内存和变量等；
    线程方式消耗的总资源比进程方式好；
2. 多线程缺点
    每个线程与主程序共用地址空间，受限于2GB地址空间；
    线程之间的同步和加锁控制比较麻烦；
    一个线程的崩溃可能影响到整个程序的稳定性；
    到达一定的线程数程度后，即使再增加CPU也无法提高性能，例如Windows Server 2003，大约是1500个左右的线程数就快到极限了（线程堆栈设定为1M），
    如果设定线程堆栈为2M，还达不到1500个线程总数；
    线程能够提高的总性能有限，而且线程多了之后，线程本身的调度也是一个麻烦事儿，需要消耗较多的CPU
    在开发中，最好是多进程和多线程结合，即根据实际的需要，每个CPU开启一个子进程，这个子进程开启多线程可以为若干同类型的数据进行处理。当然你也可以利
    用多线程+多CPU+轮询方式来解决问题。方法和手段是多样的，关键是自己看起来实现方便有能够满足要求，代价也合适。